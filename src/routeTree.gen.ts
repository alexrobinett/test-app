/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as StoryStoryIdImport } from './routes/story.$storyId'
import { Route as DashboardDemoWeatherImport } from './routes/dashboard.demo.weather'
import { Route as DashboardDemoTanstackQueryImport } from './routes/dashboard.demo.tanstack-query'
import { Route as DashboardDemoStartServerFuncsImport } from './routes/dashboard.demo.start.server-funcs'
import { Route as DashboardDemoStartApiRequestImport } from './routes/dashboard.demo.start.api-request'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StoryStoryIdRoute = StoryStoryIdImport.update({
  id: '/story/$storyId',
  path: '/story/$storyId',
  getParentRoute: () => rootRoute,
} as any)

const DashboardDemoWeatherRoute = DashboardDemoWeatherImport.update({
  id: '/demo/weather',
  path: '/demo/weather',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardDemoTanstackQueryRoute = DashboardDemoTanstackQueryImport.update(
  {
    id: '/demo/tanstack-query',
    path: '/demo/tanstack-query',
    getParentRoute: () => DashboardRoute,
  } as any,
)

const DashboardDemoStartServerFuncsRoute =
  DashboardDemoStartServerFuncsImport.update({
    id: '/demo/start/server-funcs',
    path: '/demo/start/server-funcs',
    getParentRoute: () => DashboardRoute,
  } as any)

const DashboardDemoStartApiRequestRoute =
  DashboardDemoStartApiRequestImport.update({
    id: '/demo/start/api-request',
    path: '/demo/start/api-request',
    getParentRoute: () => DashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/story/$storyId': {
      id: '/story/$storyId'
      path: '/story/$storyId'
      fullPath: '/story/$storyId'
      preLoaderRoute: typeof StoryStoryIdImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/demo/tanstack-query': {
      id: '/dashboard/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/dashboard/demo/tanstack-query'
      preLoaderRoute: typeof DashboardDemoTanstackQueryImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/demo/weather': {
      id: '/dashboard/demo/weather'
      path: '/demo/weather'
      fullPath: '/dashboard/demo/weather'
      preLoaderRoute: typeof DashboardDemoWeatherImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/demo/start/api-request': {
      id: '/dashboard/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/dashboard/demo/start/api-request'
      preLoaderRoute: typeof DashboardDemoStartApiRequestImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/demo/start/server-funcs': {
      id: '/dashboard/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/dashboard/demo/start/server-funcs'
      preLoaderRoute: typeof DashboardDemoStartServerFuncsImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardDemoTanstackQueryRoute: typeof DashboardDemoTanstackQueryRoute
  DashboardDemoWeatherRoute: typeof DashboardDemoWeatherRoute
  DashboardDemoStartApiRequestRoute: typeof DashboardDemoStartApiRequestRoute
  DashboardDemoStartServerFuncsRoute: typeof DashboardDemoStartServerFuncsRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardDemoTanstackQueryRoute: DashboardDemoTanstackQueryRoute,
  DashboardDemoWeatherRoute: DashboardDemoWeatherRoute,
  DashboardDemoStartApiRequestRoute: DashboardDemoStartApiRequestRoute,
  DashboardDemoStartServerFuncsRoute: DashboardDemoStartServerFuncsRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/story/$storyId': typeof StoryStoryIdRoute
  '/dashboard/demo/tanstack-query': typeof DashboardDemoTanstackQueryRoute
  '/dashboard/demo/weather': typeof DashboardDemoWeatherRoute
  '/dashboard/demo/start/api-request': typeof DashboardDemoStartApiRequestRoute
  '/dashboard/demo/start/server-funcs': typeof DashboardDemoStartServerFuncsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/story/$storyId': typeof StoryStoryIdRoute
  '/dashboard/demo/tanstack-query': typeof DashboardDemoTanstackQueryRoute
  '/dashboard/demo/weather': typeof DashboardDemoWeatherRoute
  '/dashboard/demo/start/api-request': typeof DashboardDemoStartApiRequestRoute
  '/dashboard/demo/start/server-funcs': typeof DashboardDemoStartServerFuncsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/story/$storyId': typeof StoryStoryIdRoute
  '/dashboard/demo/tanstack-query': typeof DashboardDemoTanstackQueryRoute
  '/dashboard/demo/weather': typeof DashboardDemoWeatherRoute
  '/dashboard/demo/start/api-request': typeof DashboardDemoStartApiRequestRoute
  '/dashboard/demo/start/server-funcs': typeof DashboardDemoStartServerFuncsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/story/$storyId'
    | '/dashboard/demo/tanstack-query'
    | '/dashboard/demo/weather'
    | '/dashboard/demo/start/api-request'
    | '/dashboard/demo/start/server-funcs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/story/$storyId'
    | '/dashboard/demo/tanstack-query'
    | '/dashboard/demo/weather'
    | '/dashboard/demo/start/api-request'
    | '/dashboard/demo/start/server-funcs'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/story/$storyId'
    | '/dashboard/demo/tanstack-query'
    | '/dashboard/demo/weather'
    | '/dashboard/demo/start/api-request'
    | '/dashboard/demo/start/server-funcs'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  StoryStoryIdRoute: typeof StoryStoryIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  StoryStoryIdRoute: StoryStoryIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/story/$storyId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/demo/tanstack-query",
        "/dashboard/demo/weather",
        "/dashboard/demo/start/api-request",
        "/dashboard/demo/start/server-funcs"
      ]
    },
    "/story/$storyId": {
      "filePath": "story.$storyId.tsx"
    },
    "/dashboard/demo/tanstack-query": {
      "filePath": "dashboard.demo.tanstack-query.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/demo/weather": {
      "filePath": "dashboard.demo.weather.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/demo/start/api-request": {
      "filePath": "dashboard.demo.start.api-request.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/demo/start/server-funcs": {
      "filePath": "dashboard.demo.start.server-funcs.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
